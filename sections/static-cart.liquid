
{% assign is_customer = false %}
{% if shop.customer_accounts_enabled and customer %}
  {% assign is_customer = true %}
{% endif %}

{% assign has_sidebar = false %}
{% assign has_items = false %}
{% assign show_continue_link = false %}

{% assign serenity_price = settings.serenity_option_price | plus: 0 %}
{% assign final_touch_price = settings.final_touch_price | divided_by: 100 | plus: 0 %}
{% assign use_serenity_option = false %}
{% assign use_final_touch_option = false %}

{% if section.blocks.size > 0 %}
  {% assign has_sidebar = true %}
{% endif %}

{% if cart.items.size > 0 %}
  {% assign has_items = true %}
{% endif %}

{% assign continue_url = routes.all_products_collection_url %}
{% if settings.continue_shopping_url != blank %}
  {% assign continue_url = settings.continue_shopping_url %}
{% endif %}

{% if settings.continue_url_cart %}
  {% assign show_continue_link = true %}
  {%- capture continue_link_html -%}
    <a class="cart-continue" href="{{ continue_url }}">
      {{ 'cart.general.continue_shopping' | t }}
      {% render 'icon-library', id: 'icon-signpost-arrow' %}
    </a>
  {%- endcapture -%}
{% endif %}

<script
  type="application/json"
  data-section-type="static-cart"
  data-section-id="{{ section.id }}"
  data-section-data
>
  {
    "settings": {
      "shipping": {{ section.settings.enable_shipping_calc | json }},
      "money_format": {{ shop.money_format | strip_html | json }}
    },
    "shipping": {
      "calculate_shipping": {{ 'cart.shipping.calculate_shipping' | t | json }},
      "calculating": {{ 'cart.shipping.calculating' | t | json }},
      "customer": {{ is_customer | default: false | json }},
      "multiple_rates": {{ 'cart.shipping.multiple_rates' | t: number_of_rates: '*number_of_rates*', address: '*address*', rate: '*rate*' | json }},
      "one_rate": {{ 'cart.shipping.one_rate' | t: address: '*address*' | json }},
      "no_rates": {{ 'cart.shipping.no_rates' | t | json }},
      "rate_value": {{ 'cart.shipping.rate_value' | t: rate_title: '*rate_title*', rate: '*rate*'  | json }},
      "zip": {{ 'cart.shipping.zip' | t | json }},
      "shipment_too_heavy": {{ 'cart.shipping.shipment_too_heavy' | t | json }},
      "error_general": {{ 'cart.shipping.error_general' | t | json }}
    }
  }
</script>

<style>
  .cartitems--container {
    margin-bottom: 80px;
  }

  .cartitems--list {
    margin-top: 0px;
  }

  .option-checkbox {
    margin-right: 16px;
    width: 20px;
    height: 20px;
  }

  .cart-title-left h1 {
    color: var(--gray-900, #101828);
    font-family: Playfair Display;
    font-size: 42px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
  }

  .cartitems--container .cartitems-empty {
    border-radius: 8px;
  }

  .cart-title-total {
    color: var(--couleurs-principales-noir, #1F1F1F);
    font-family: DM Sans;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
  }

  .cart-final-total {
    padding-top: 0px !important;
  }

  .cart-options-container {
    display: flex;
    padding: 24px;
    flex-direction: column;
    align-items: flex-start;
    gap: 20px;
    align-self: stretch;
    border-radius: 8px;
    background: var(--gray-50, #F9FAFB);
  }

  .cart-options-container label {
    color: #000;
    font-family: DM Sans;
    font-size: 16px;
    font-style: normal;
    font-weight: 600;
    line-height: 24px;
  }

  .cart-options-container p {
    color: var(--couleurs-principales-noir, #1F1F1F);
    font-family: DM Sans;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 24px;
    margin: 0px;
  }

  .cart-options-container span {
    color: var(--black, #161616);
    font-family: DM Sans;
    font-size: 20px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
  }

  .options-row {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  .collapsible-tab--option .total {
    display: flex;
    align-items: center;
    gap: 48px;
  }

  .collapsible-tab--option .total span {
    color: var(--black, #161616);
    font-family: DM Sans;
    font-size: 20px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
  }

  .quantity-selector {
    margin-bottom: 24px;
  }

  .collapsible-tab--option {
    display: flex;
    padding: 24px;
    flex-direction: column;
    align-items: flex-start;
    gap: 20px;
    align-self: stretch;
    border-radius: 8px;
    background: var(--gray-50, #F9FAFB);
  }

  .tab-list {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }
  .cart-checkout-block{
    width:30%;
    margin-left:auto;
    margin-bottom: 20px;
  }
  .cart-sidebar-discount{
    margin-top: 0!important;
    margin-bottom:0!important;
  }
  .cart-checkout button[name="checkout"]{
    padding: 10px;
    font-size: 18px;
    width:30%;
    display: flex;
    justify-content: center;
  }
  .cart-checkout svg{
    width: 15px;
    height:15px
  }
  .cart-checkout{
    display: flex;
    align-items: end;
    flex-direction: column;
  }
  .cart-subtotal{
    margin-left:auto;
    width:auto;
  }
  .cart-message.meta{
    text-align:right;
  }
  #apply-discount-btn{
    background-color: #8b8b8b;
    border-color: #8b8b8b;
  }
{% comment %}
  @media screen and (min-width: 480px){
    .cart-checkout{
      flex-grow: 3;
      margin-right: 2rem;
      
    }
    .cart-sidebar-discount{
      margin-left: 2rem;
      flex-grow: 1;
    }
  }
  @media screen and (max-width: 480px){
    .cart-checkout-block{
      flex-direction: column;
      align-items: center;
    }
  }
  {% endcomment %}

    @keyframes rotation {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
  } 

  .loader{
    z-index: 100;
    position: absolute;
    top: 0;
    bottom:0;
    left:0;
    right:0;
    margin:auto;
  }

  @media screen and (max-width: 720px){
    .cart-checkout button[name="checkout"]{
      width: auto;
    }
  }
</style>
<form
  action="{{ routes.cart_url }}"
  method="post"
  aria-label="cart checkout"
>
  <header class="cart-title">
    <div class="cart-title-left">
      <h1>{{ 'cart.general.my_cart' | t }}</h1>

      {% if has_items %}
        <div class="cart-title-total--small"></div>
      {% endif %}
    </div>

    {% if has_items or show_continue_link %}
      <div class="cart-title-right">
        {% if has_items %}
          <div class="cart-title-total--large">
            <div class="cart-title-total" data-cart-title-total>
              {{ 'cart.general.subtotal' | t }}
            {% comment %}
              {% assign price = 0 %}
              {% for item in cart.items %}
                
                {% assign price = price | plus: item.variant.price %}
                <script> console.log({{ item|json}})</script>
              {% endfor %}
              <script> console.log("total {{price | money_without_currency}} ")</script>
            {% endcomment %}
              
              <span class="money" data-cart-total> {{ cart.checkout_charge_amount | money_without_currency }} € </span>
            </div>
          </div>

          <button
            class="button-primary cart-title-button"
            name="checkout"
            type="submit"
            aria-label="{{ 'cart.general.checkout' | t }}"
          >
            {% if settings.enable_checkout_lock_icon %}
              {% render 'icon-checkout-lock' %}
            {% else %}
              {% render 'icon-library', id: 'old-icon-cart' %}
            {% endif %}
            {{ 'cart.general.checkout' | t }}
          </button>
        {% elsif show_continue_link %}
          {{ continue_link_html }}
        {% endif %}
      </div>
    {% endif %}
  </header>

  <section class="cartitems--container {% if has_sidebar %}has-sidebar{% endif %}">
    <div class="cartitems">
      {% if has_items %}
        {% render 'cart-item-list', show_sku: section.settings.show_sku, cart: cart %}

        {% comment %}
        HTML OPTION SERENITE
        {% assign option_serenite = all_products['option-serenite'] %}
        {% assign option_serenite_variant = option_serenite.variants[0] %}
        {% assign hasOptionSerenite = false %}
        {% for item in cart.items %}
          {% if item.variant.id == option_serenite_variant.id %}
            {% assign hasOptionSerenite = true %}
            {% break %}
          {% endif %}
        {% endfor %}

          <div class="tab-list" id="cart-option-serenite" style="margin-bottom:1.5rem;">
            <details class="collapsible-tab--option" id="serenity-wrapper">
              <summary class="collapsible-tab__heading">
                <span class="d-flex align-items-center" id="serenite-option">
        
                  <div class="form-field w-100 mx-0">
                    <input
                      type="checkbox"
                      class="planet-cards-check"
                      id="serenite-checkbox"
                      {% if hasOptionSerenite %}
                        checked
                      {% endif %}
                    >
        
                    <label
                      class="checkbox-label planet-cards-check"
                    >
                      {{ option_serenite.title }}
                    </label>
                  </div>
                </span>
        
                <div class="total">
                  <span>+ {{ option_serenite.price | money_without_currency }} €</span>
                  {% render 'icon-chevron-down-small' %}
                </div>
              </summary>
        
              <div class="collapsible-tab__text">
                {{ settings.collapsible_tab_text }}
                <div
                  class="collapsible-highlight"
                >
                  <h2>{{ settings.collapsible_tab_highlight_title }}</h2>
                  {{ option_serenite.description }}
                </div>
              </div>
            </details>
          </div>
      {% endcomment %}
        
        <div class="cart-total">
          {% if section.settings.enable_order_notes %}
            <div class="cart-ordernote">
              <span class="cart-ordernote-heading">{{ 'cart.general.enter_order_note' | t }}</span>
              <div class="form-field">
                <textarea
                  class="form-field-input form-field-textarea"
                  name="note"
                  id="cart-note"
                >{{ cart.note }}</textarea>
                <label class="form-field-title" for="cart-note">{{ 'cart.general.special_instructions' | t }}</label>
              </div>
            </div>
          {% endif %}

          <div class="cart-final-total">
            <noscript>
              <button
                class="cart-update"
                type="submit"
                aria-label="{{ 'cart.general.update' | t }}"
              >
                {{ 'cart.general.update' | t }}
              </button>
            </noscript>

            <ul class="discount-list" data-cart-discounts aria-label="{{ 'product.general.discounts' | t }}">
              {% render 'cart-discounts', cart: cart %}
            </ul>

            <div class="cart-subtotal">
              <span>{{ 'cart.general.subtotal' | t }}</span>
              <span class="money" data-cart-total>{{ cart.checkout_charge_amount | money_without_currency }} €</span>
            </div>
          </div>

          <div class="cart-shipping">
            {%- capture taxes_shipping_checkout -%}
              {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
              {%- elsif cart.taxes_included -%}
                {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
              {%- elsif shop.shipping_policy.body != blank -%}
                {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
              {%- else -%}
                {{ 'cart.general.tax_and_shipping' | t }}
              {%- endif -%}
            {%- endcapture -%}

            <p class="cart-message meta">{{ taxes_shipping_checkout }}</p>

            {% comment %}
              snippets/cart-shipping.liquid has an internal check to see if shipping is required
            {% endcomment %}
            {% if section.settings.enable_shipping_calc %}
              {% render 'cart-shipping' %}
            {% endif %}
          </div>
        {% comment %}
          <div class="cart-checkout-block">
            <div class="cart-checkout">
              <button
                class="button-primary"
                type="submit"
                name="checkout"
                aria-label="{{ 'cart.general.checkout' | t }}"
              >
                {% if settings.enable_checkout_lock_icon %}
                  {% render 'icon-checkout-lock' %}
                {% else %}
                  {% render 'icon-library', id: 'old-icon-cart' %}
                {% endif %}
                {{ 'cart.general.checkout' | t }}
              </button>
  
              {% if additional_checkout_buttons %}
                <div class="additional-checkout-buttons">
                  {{ content_for_additional_checkout_buttons }}
                </div>
              {% endif %}
  
              {% if show_continue_link %}
                {{ continue_link_html }}
              {% endif %}
            </div>
            {% render 'code-promo-snippet' %}
          </div>
        {% endcomment %}
          {% comment %}
          <div class="cart-checkout-block">
            {% render 'code-promo-snippet' %}
          </div>
          {% endcomment %}
          
          <div class="cart-checkout">
              <button
                class="button-primary cart-title-button"
                type="submit"
                name="checkout"
                aria-label="{{ 'cart.general.checkout' | t }}"
              >
                {% if settings.enable_checkout_lock_icon %}
                  {% render 'icon-checkout-lock' %}
                {% else %}
                  {% render 'icon-library', id: 'old-icon-cart' %}
                {% endif %}
                {{ 'cart.general.checkout' | t }}
              </button>
              {% comment %}
              {% if additional_checkout_buttons %}
                <div class="additional-checkout-buttons">
                  {{ content_for_additional_checkout_buttons }}
                </div>
              {% endif %}
              {% endcomment %}
  
              {% if show_continue_link %}
                {{ continue_link_html }}
              {% endif %}
            </div>
        </div>
      {% else %}
        <div class="cartitems-empty">
          <div class="cartitems-empty--inner">
            <p>{{ 'cart.general.cart_empty' | t }}</p>

            {% if show_continue_link %}
              <a class="button-primary" href="{{ continue_url }}">
                {% render 'icon-library', id: 'old-icon-cart' %}
                {{ 'cart.general.continue_shopping' | t }}
              </a>
            {% endif %}
          </div>
        </div>
      {% endif %}
    </div>

    {% if has_sidebar %}
      <div class="cart-sidebar" data-cart-sidebar>
        {% for block in section.blocks %}
          <div class="cart-sidebar-block" {{ block.shopify_attributes }}>
            {% if block.type == 'image' %}
              {% assign image = block.settings.image %}

              <article class="cart-sidebar-item">
                {% if image %}
                  {%
                    render 'rimg',
                    img: image,
                    class: 'cart-sidebar-item-image',
                    size: '445x',
                    lazy: true,
                    canvas: true,
                    focal_point: image.presentation.focal_point,
                  %}
                {% else %}
                  {{ 'image' | placeholder_svg_tag: 'placeholder--image cart-sidebar-item-image' }}
                {% endif %}
              </article>
            {% endif %}

            {% if block.type == 'richtext' %}
              <article class="cart-sidebar-item cart-sidebar-item--text rte">
                {{ block.settings.richtext }}
              </article>
            {% endif %}

            {% if block.type == 'page' %}
              <article class="cart-sidebar-item cart-sidebar-item--text rte">
                {{ pages[block.settings.page].content }}
              </article>
            {% endif %}
            {% if block.type == 'promo_code' and has_items %}
              {% render 'code-promo-snippet' %}
            {% endif %}
          </div>
        {% endfor %}
      </div>
    {% endif %}
  </section>
</form>

{% schema %}
{
  "name": "t:sections.cart_page.name",
  "class": "cart--section section--canonical",
  "max_blocks": 2,
  "settings": [
    {
      "type": "checkbox",
      "id": "show_sku",
      "label": "t:sections.cart_page.show_sku.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_order_notes",
      "label": "t:sections.cart_page.enable_order_notes.label",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.cart_page.header_1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_shipping_calc",
      "label": "t:sections.cart_page.enable_shipping_calc.label",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_calc_default_country",
      "label": "t:sections.cart_page.shipping_calc_default_country.label",
      "default": "United States"
    },
    {
      "type": "text",
      "id": "sample_code",
      "label": "t:sections.cart_page.sample_code.label"
    },
    {
      "type": "text",
      "id": "sample_code_id",
      "label": "t:sections.cart_page.sample_code_id.label"
    },
    {
      "type": "text",
      "id": "collapsible_tab_text",
      "label": "Titre option sérénité"
    },
    {
      "type": "text",
      "id": "collapsible_tab_highlight_title",
      "label": "Description"
    }
  ],
  "blocks": [
    {
      "type": "richtext",
      "name": "t:sections.cart_page.blocks.rich_text.name",
      "limit": 1,
      "settings": [
        {
          "id": "richtext",
          "type": "richtext",
          "label": "t:sections.cart_page.blocks.rich_text.richtext.label",
          "default": "<p>Use this section to welcome customers to your store, say a bit about your brand, or share news and seasonal promotions.</p>"
        }
      ]
    },
    {
      "type": "image",
      "name": "t:sections.cart_page.blocks.image.name",
      "limit": 1,
      "settings": [
        {
          "id": "image",
          "type": "image_picker",
          "label": "t:sections.cart_page.blocks.image.image.label"
        }
      ]
    },
    {
      "type": "page",
      "name": "t:sections.cart_page.blocks.page.name",
      "limit": 1,
      "settings": [
        {
          "id": "page",
          "type": "page",
          "label": "t:sections.cart_page.blocks.page.page.label"
        }
      ]
    },
    {
      "type": "promo_code",
      "name": "t:sections.cart_page.blocks.promo_code",
      "limit": 1
    }
  ]
}
{% endschema %}
<script>
    async function getCartItemsByVariantId(variantId){
      const cart = await fetch(window.Shopify.routes.root + 'cart.js').then(response => response.json());
      return cart.items.filter(item => item.variant_id == variantId);
    }

    async function changeCartItem(changes){
      return await fetch(window.Shopify.routes.root + 'cart/change.js',{
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(changes)
      }
    )
    }

    async function updateCart(updates){
      return await fetch(window.Shopify.routes.root + 'cart/update.js',{
          method: "POST",
          headers: {
            'Content-Type': 'application/json'
          }
          ,body: JSON.stringify({updates: updates})
        })
    }

  async function clearCart(){
    return await fetch(window.Shopify.routes.root + 'cart/clear.js', {
      method: "POST",
          headers: {
            'Content-Type': 'application/json'
          }
    })
  }


    async function getCart(){
      return await fetch(window.Shopify.routes.root + 'cart.js').then(response => response.json())
    }

    async function updatePrice(){
      const cart = await getCart();
      const totalPrice = cart.total_price;
      const headerTotal = document.querySelector(".cart-title .cart-title-total .money");
      const cartTotal = document.querySelector(".cart-total .cart-subtotal .money");
      const formattedTotal = formatMoney(totalPrice,"\{\{ amount \}\}€");
      headerTotal.textContent = formattedTotal;
      cartTotal.textContent = formattedTotal;
    }

  async function addCartItems(items){
    return fetch(window.Shopify.routes.root + 'cart/add.js',{
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(items)
    });
  }
      
document.addEventListener("DOMContentLoaded", () => {
  {% comment %}
    JS OPTION SERENITE
  
  let hasOptionSerenite = {{hasOptionSerenite}};
  const optionSereniteCheckbox = document.getElementById("serenite-checkbox")
  const optionSereniteCheckboxSpan = document.getElementById("serenite-option");
  if(optionSereniteCheckboxSpan){
    optionSereniteCheckboxSpan.addEventListener("click",async ()=>{
      window.onbeforeunload = emptyFunction
      optionSereniteCheckboxSpan.setAttribute("disabled",true);
      optionSereniteCheckbox.setAttribute("disabled",true);
      if(hasOptionSerenite){
          await updateCart({ "{{ option_serenite_variant.id }}": 0});
          hasOptionSerenite = false;
          optionSereniteCheckbox.removeAttribute("checked");
        }
      else{
        await updateCart({ "{{ option_serenite_variant.id }}": 1});
        hasOptionSerenite = true;
        optionSereniteCheckbox.setAttribute("checked", true);
      }
      await updatePrice();
      optionSereniteCheckboxSpan.removeAttribute("disabled");
      optionSereniteCheckbox.removeAttribute("disabled");
      window.onbeforeunload = ""
  })
  
}
{% endcomment %}
                      
  
  const onDomContentLoaded = async () => {
    /*const urlParamsCart = new URLSearchParams(window.location.search);
    const productsToAdd = urlParamsCart.get('productsToAdd');
    const token = urlParamsCart.get('token_persoapp');
    //const quantityToAdd = urlParamsCart.get('quantity');
    const currentCart = await getCart();
    if(token){
      localStorage.setItem("outil_access_token", token);
    }
     if (productsToAdd) {
        if (currentCart.items.find((item) => {return item.variant_id == productsToAdd}) === undefined) { 
          await addCartItems({items:[{id: productsToAdd, quantity: 1}]});
        }
        window.location = window.location.href.split("?")[0];
     }*/

      const variantsInCart = [{%- for item in cart.items -%}"{{ item.variant_id }}",{% endfor %}];
      const urlParamsCart = new URLSearchParams(window.location.search);
      const productsToAdd = urlParamsCart.get('productsToAdd');
      const token = urlParamsCart.get('token_persoapp');
      if(token){
        localStorage.setItem("outil_access_token", token);
      }
       if (productsToAdd) {
          if (variantsInCart.find((id) => {return id == productsToAdd}) === undefined) { 
            const toto = await addCartItems({items:[{id: productsToAdd, quantity: 1}]});
            console.log(toto);
            window.location.href = window.location.href.split("?")[0];
          }
           else
            window.location.href = window.location.href.split("?")[0];
  
       }
    };
  onDomContentLoaded();
  })
  

  async function deleteCartMetafield(){
    const access_token = localStorage.getItem("outil_access_token");
    if(access_token){
      await fetch(OUTIL_PERSO_API + 'users/clearMetafield',{
          method: "POST",
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${access_token}`
          },
          body:JSON.stringify({
            "namespace": "custom",
            "key": "cart",
          })
        })
    }
  }
  /*

    let cart;

    document.addEventListener("DOMContentLoaded",async ()=>{
      //const cart = await fetch(window.Shopify.routes.root + 'cart.js')
       // .then(response => response.json()).catch(err => {console.log(err)})
      //console.log(cart);
      //const testItems = JSON.stringify({items:[{id:{{all_products['option-serenite'].variants[0].id}}, quantity:1}]});
      //await fetch(window.Shopify.routes.root + 'cart/add.js',{method: "POST", headers: {'Content-Type': 'application/json'},body: testItems} ).catch(err => {console.log(err)})
    })*/

      const stringLabels = {
      "FIND": "{{ 'product.options.White_and_gold_twine' | t }}",
      "FINA": "{{ 'product.options.Jute_twine' | t }}",
      "FINO": "{{ 'product.options.Black_twine' | t }}"
    };

    const cutLabels = {
      "RC0": "{{ 'product.options.Square_corners' | t }}", 
      "RC1": "{{ 'product.options.Round_corners' | t }}",
      "RC3": "{{ 'product.options.Inverted_corners' | t }}"
    };

    const paperLabels = {
      "TPCVEL": "{{ 'product.options.Blanc_mat' | t }}",
      "TPCREC": "{{ 'product.options.Recycle' | t }}",
      "TPCSAT": "{{ 'product.options.Satine' | t }}",
      "TPCTIN": "{{ 'product.options.Relief_tintoretto' | t }}",
      "TPCMAT": "{{ 'product.options.Satine_pellicule_mat' | t }}",
      "TPCBRI": "{{ 'product.options.Satine_pellicule_brillant' | t }}",
      "TPCMAG": "{{ 'product.options.Magnetique' | t }}",
      "TPCLUX": "{{ 'product.options.Nacre' | t }}",
    };

  const envelopeLabels = {
    "ENV114X162_BLUE": "{{ 'product.options.ENV114X162_BLUE' | t }}",
    "ENV114X162_BLUEP": "{{ 'product.options.ENV114X162_BLUEP' | t }}",
    "ENV114X162_LOGO": "{{ 'product.options.ENV114X162_LOGO' | t }}",
    "ENV165X165_LOGO": "{{ 'product.options.ENV165X165_LOGO' | t }}",
    "ENV100X100_LOGO": "{{ 'product.options.ENV100X100_LOGO' | t }}",
    "ENV90X235_LOGO": "{{ 'product.options.ENV90X235_LOGO' | t }}",
    "ENV114X162_PINKP": "{{ 'product.options.ENV114X162_PINKP' | t }}",
    "ENV165X165_BLUE": "{{ 'product.options.ENV165X165_BLUE' | t }}",
    "ENV165X165_PINK": "{{ 'product.options.ENV165X165_PINK' | t }}",
    "ENV114X162_KRAFT": "{{ 'product.options.ENV114X162_KRAFT' | t }}",
  }

</script>
{% render 'gtm-cart-viewed' %}
